 
const readlineSync = require('readline-sync');
const whereMines = [] //–ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–∏–Ω
//–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã(–ø–æ–ª—è)
const createField = (line, —Åolumn, count) => {
    const field = []; 
    for (let Line = 0; Line < line; Line++){
        field.push([])
        for (let Column = 0; Column < —Åolumn; Column++) {
            field[Line].push('‚¨ú')
        }
    }
    for (i = 0; i < count; i++) {
        const x = Math.floor(Math.random() * line)
        const y = Math.floor(Math.random() * —Åolumn)
        if (checkMine(x,y) === false)  {
            whereMines.push([x+1,y+1])
        } else i--; 
    }
    return field
}
//–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞ –º–∏–Ω—É
const checkMine = (num1,num2) => {
    for (const position of whereMines) {
        if (position[0] === num1 && position[1] === num2) {
            return true
        }
    }
    return false;
}
//–í—ã–≤–æ–¥ –ø–æ–ª—è
const displayField = () => {
    for (const line of game) {
        let a = ""
        for (const num of line){
            a += num + " "
        }
        console.log(a)
    }
  }
//–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–µ—Ç–∫–∏
const checkCell = (x, y) => {
    if (checkMine(x,y) === false) {         
        game[x-1][y-1] = checkAdjacentMines(x,y)
        return false
    }
    game[x-1][y-1] = 'üí£'
    return -10000
}
//–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä—è–¥–æ–º –Ω–∞—Ö–æ–¥—è—à–∏—Ö—Å—è –º–∏–Ω
const checkAdjacentMines = (x, y , zero = 0)  => {
    let minCount = 0;
    for (let i = x - 1; i <= x + 1; i++) {
        for (let j = y - 1; j <= y + 1; j++) {
            if ((i <= Line && j <= Column) && (i !== x || j !== y) && game?.[i-1]?.[j-1] === '‚¨ú' ) {
                if (checkMine(i,j) === true) {                 
                    minCount++;
                }
                if (zero === 1) {
                    game[i-1][j-1] = checkAdjacentMines(i, j)
                } 
            }
        }
    }
    switch(minCount){
        case 1:
            return '1Ô∏è‚É£ '
        case 2:
            return '2Ô∏è‚É£ '
        case 3:
            return '3Ô∏è‚É£ '
        case 4:
            return '4Ô∏è‚É£ '
        case 5:
            return '5Ô∏è‚É£ '
        case 6:
            return '6Ô∏è‚É£ '
        case 7:
            return '7Ô∏è‚É£ '
        case 8:
            return '8Ô∏è‚É£ '
        case 0:
            if (zero === 1) {
                return '0Ô∏è‚É£ '
            }
            game[x-1][y-1] = '0Ô∏è‚É£ '
            checkAdjacentMines(x,y, 1)
            return '0Ô∏è‚É£ '

    }
}
//–î–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—è
const Line = Number(readlineSync.question('–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–Ω–∏–π: '))
const Column = Number(readlineSync.question('–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤: '))
const Mine = Number(readlineSync.question('–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω: '))
const game = createField(Line, Column, Mine)
let exit = 0
//–°–∞–º –ø—Ä–æ—Ü–µ—Å—Å
while(exit != Mine) {
    if (exit < 0) {
        console.log('–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!')
        for (const mine of whereMines) {
            checkCell(mine[0], mine[1])
        }
        displayField()
        break
    }
    displayField() 
    let choose = (readlineSync.question('–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ?\n 1 - –í—ã–±—Ä–∞—Ç—å –∫–ª–µ—Ç–∫—É —Å –º–∏–Ω–æ–π\n 2 - –í—ã–±—Ä–∞—Ç—å –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É\n 3 - –£–±—Ä–∞—Ç—å —Ñ–ª–∞–≥\n'))
    let x = Number(readlineSync.question('–í—ã–±–∏—Ä–∏—Ç–µ –ª–∏–Ω–∏—é: '))
    let y = Number(readlineSync.question('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü: '))
    if (x > Line || y > Column || (choose !== '1' && choose !== '2' && choose !== '3') || x === ''|| y === ''){
        console.log('–û—à–∏–±–∫–∞!')
    } 
    else {
        switch(choose){
            case '1':
                game[x-1][y-1] = 'üö©'
                break
            case '2':
                exit += checkCell(x, y)
                break
            case '3':
                game[x-1][y-1] = '‚¨ú'
                break
        }
    }
    //–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è –Ω–∞ —Ñ–ª–∞–≥–∏ –∏ –ø–æ–±–µ–¥—É
    for (let i = 0; i < Line; i++) {
        let correct = 0 
        for (let j = 0; j < Column; j++) {
            if (checkMine(i+1, j+1) === true && game?.[i]?.[j] === 'üö©') {
                correct++
            }
        }
        if (correct === Mine) {
            displayField()
            console.log('–¢—ã –≤—ã–π–≥—Ä–∞–ª!')
            exit = Mine
        }
    }
}
